name: Reusable Image Build Workflow

on:
  workflow_call:
    inputs:
      image_group:
        required: true
        type: string
      image_type:
        required: true
        type: string
      platforms:
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      image_type: ${{ steps.set_variables.outputs.image_type }}
      should_run_build: ${{ steps.changes.outputs.src == 'true' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' }}
    steps:
      - id: set_variables
        run: |
          image_type_json=$(echo -n $image_type | jq -R -s -c 'split(",")')
          echo "image_type=$image_type_json" >> $GITHUB_OUTPUT
        env:
          image_type: ${{ inputs.image_type }}
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3
        id: changes
        with:
          filters: |
            src:
              - '.github/workflows/${{ inputs.image_group }}-image-build.yaml'
              - '${{ inputs.image_group }}/**'
              - '.github/workflows/reusable-image-build.yaml'

  build:
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    env:
      # Push if not a pull request and references the main branch
      docker_push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) }}
      build_required: ${{ needs.setup.outputs.should_run_build }}
    needs: [setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image_type: ${{ fromJson(needs.setup.outputs.image_type) }}
      fail-fast: false
    steps:
      - name: Checkout Code
        if: env.build_required
        id: checkout_code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        if: env.build_required
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3
      - name: Set up Docker Buildx
        if: env.build_required
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
        with:
          driver-opts: network=host

      # release version is the name of the tag i.e. v0.10.0 with the type appended i.e. v0.10.0-general-purpose
      # if the ref is main then the release version is latest with the type appended i.e. latest-general-purpose
      - name: Docker meta
        if: env.build_required
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        with:
          images: |
            ghcr.io/${{ github.repository }}/${{ inputs.image_group }}/${{ matrix.image_type }}
          labels: |
            org.opencontainers.image.authors="@${{ github.repository_owner }} Github Org"
            org.opencontainers.image.licenses=BSD-3
            org.opencontainers.image.source=${{ github.repository_url }}
          tags: |
            # semver
            type=semver,pattern={{major}},prefix=v,event=tag
            type=semver,pattern={{major}}.{{minor}},prefix=v,event=tag
            type=semver,pattern={{major}}.{{minor}}.{{patch}},prefix=v,event=tag
            # latest
            type=raw,event=push,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          flavor: |
            # This is disabled here so we can use the raw form above
            latest=false
            # Suffix is not used here since there's no way to disable it above

      - name: Log in to the Container registry
        if: env.build_required
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ghcr.io/${{ github.repository }}/${{ inputs.image_group }}/${{ matrix.image_type }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Build and if required push image"
        if: env.build_required
        id: build_push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ./${{ inputs.image_group }}/${{ matrix.image_type }}
          build-args: |
            IMAGE_COMMIT=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            IMAGE_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          platforms: ${{ inputs.platforms }}
          push: ${{ env.docker_push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }}

      - name: Generate artifact attestation
        if: env.build_required && env.docker_push
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2
        id: attest
        with:
          subject-name: ghcr.io/${{ github.repository }}/${{ inputs.image_group }}/${{ matrix.image_type }}
          subject-digest: ${{ steps.build_push.outputs.digest }}
          push-to-registry: ${{ env.docker_push }}
